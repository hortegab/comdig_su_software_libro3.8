options:
  parameters:
    author: Homero Ortega Boada
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Dale un valor a Es/No, corre el flujograma y obten la SER. Puedes
      sacar tantos valores como para construir una curva de SER
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ser_simulation
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: run_stop
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: SER Simulation
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 0]
    rotation: 0
    state: enabled

blocks:
- name: EsN0max
  id: variable
  parameters:
    comment: ''
    value: '25.'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 244]
    rotation: 0
    state: enabled
- name: EsN0min
  id: variable
  parameters:
    comment: ''
    value: '-5.'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 180]
    rotation: 0
    state: enabled
- name: M0
  id: variable
  parameters:
    comment: ''
    value: len(const0)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 4]
    rotation: 0
    state: enabled
- name: MaxCount
  id: variable
  parameters:
    comment: ''
    value: int(1e7)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 308]
    rotation: 0
    state: enabled
- name: MaxErrors
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 372]
    rotation: 0
    state: enabled
- name: MiconstellationObject0
  id: variable_constellation
  parameters:
    comment: ''
    const_points: const0
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: mapa
    type: calcdist
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 4]
    rotation: 0
    state: enabled
- name: N_snr
  id: variable
  parameters:
    comment: ''
    value: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 116]
    rotation: 0
    state: enabled
- name: Rs
  id: variable
  parameters:
    comment: ''
    value: samp_rate/Sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 52]
    rotation: 0
    state: enabled
- name: Sps
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 68]
    rotation: 0
    state: enabled
- name: const0
  id: variable
  parameters:
    comment: ''
    value: digital.constellation_bpsk().points()
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 4]
    rotation: 0
    state: enabled
- name: mapa
  id: variable
  parameters:
    comment: ''
    value: np.arange(M0)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [819, 6]
    rotation: 0
    state: enabled
- name: run_stop
  id: variable_qtgui_check_box
  parameters:
    comment: ''
    'false': 'False'
    gui_hint: 0,0,1,1
    label: Inicial/Parar
    'true': 'True'
    type: int
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 4]
    rotation: 180
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 100e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 68]
    rotation: 0
    state: enabled
- name: analog_random_source_x_1
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: M0
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '10000000'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [-11, 136]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [11, 505]
    rotation: 180
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: N_snr
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [540, 162]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: N_snr
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [524, 518]
    rotation: 180
    state: true
- name: digital_chunks_to_symbols_xx_1
  id: digital_chunks_to_symbols_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dimension: '1'
    in_type: byte
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    out_type: complex
    symbol_table: const0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [315, 165]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0_0_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: MiconstellationObject0
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [268, 509]
    rotation: 180
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    EsN0max: EsN0max
    EsN0min: EsN0min
    N: N_snr
    Rs: Rs
    Sps: Sps
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import math\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\nEs un\
      \ canal AWGN (Additive White Gaussian Noise, en banda base), con entrada vectorial.\
      \ Recibe la envolvente compleja de una senal con modulacion digital. Entrega\
      \ la misma senal recibida pero con ruido blanco gausiano aditivo con diferentes\
      \ valores de potencia que corresponden a N diferentes valores de Es/No entre\
      \ EsNOmin y EsN0max (valores dados en dB). Este bloque se diferencia de otros\
      \ bloques tradicionales de canal AWGN en lo siguiente: Tiene internamente una\
      \ funcion que mide la potencia promedio de la senal entrante Ps, de modo que\
      \ puede calcular Es=Ps/Rs; de esa manera puede N valores de potencia Pn para\
      \ el ruido Pn para lograr los N valores de la relacion Es/No. Con esto ha completado\
      \ el primer ensayo para que otro sea el bloque que calcule la Curva de SER.\
      \ Pero alli no para, sino que sigue realizando tantos ensayos como lo permita\
      \ el tiempo de simulacion, para que el bloque que calcula la Curva de BER la\
      \ pueda ir perfeccionando cada vez mas.\n\nDatos de configuracion del bloque:\n\
      N: Es la longitud del vector y coincide con el numero de puntos discretos que\
      \ va a tener la curva de BER. Tambien corresponde al numero de valores que tomar\xE1\
      \ la relacion Es/No\nEsN0min: El minimo valor a tener en cuenta para Es/No\n\
      EsN0max: El maximo valor a tener en cuenta para Es/No\nRs: es la rata de simbolos.\n\
      Sps: El numero de muestras por simbolo. Usualmente es 1, pero pueden darse excepciones.\
      \ \nEs: es la energia de un simbolo\n\nAlgunas variables internas son:\nNo:\
      \ es la Densidad espectral del potencia del ruido blanco.\nSNR: es la relacion\
      \ senal a ruido\n\"\"\"\n\n\n    def __init__(self, N=16, EsN0min=0, EsN0max=16,Sps=1,Rs=1):\
      \  # only default arguments here\n        \"\"\" \"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='e_SER_Channel',   # will show up in GRC\n\
      \            in_sig=[(np.complex64,N)],\n            out_sig=[(np.complex64,N)]\n\
      \        )\n        samp_rate=Rs*Sps\n        EsN0dB=np.linspace(EsN0min,EsN0max,N)\n\
      \        EsN0=pow(10.,EsN0dB/10.) \n        self.SNR=EsN0*Rs/samp_rate\n   \
      \     \n        \n    def work(self, input_items, output_items):\n        L=len(input_items[0])\
      \ # la entrada en una matrix de L filas y N columnas\n        SNR_matrix=np.array([self.SNR]*L)\
      \ # convertimos SNR a matrix\n        P_s=np.mean(np.absolute(input_items[0])**2)\
      \  # La potencia de la senal\n        P_n = P_s/SNR_matrix                 \
      \   # la potencia del ruido\n        #output_items[0] = input_items[0]+noise_c(np.sqrt(P_n))\n\
      \        output_items[0] = input_items[0]*1.5\n        return len(output_items[0])\n\
      \        \ndef noise_c(Vrms):\n    # random.normal() pide la desviacion standard\
      \ pero es el mismo Valor RMS\n    # Vrms es el Valor RMS de la Envolvente compleja\
      \ del ruido, pero la vamos\n    # a generar como un ruido real mas un ruido\
      \ imaginario. Pero esas dos\n    # senales tienen un valor RMS un tanto diferente:\
      \ Vrms_q=Vrms/math.sqrt(2.)\n    Vrms_q= Vrms/math.sqrt(2.)\n    n= np.random.normal(0.,Vrms_q)+np.random.normal(0.,Vrms_q)*1.j\n\
      \    return n \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: "('e_SER_Channel', 'blk', [('N', '16'), ('EsN0min', '0'), ('EsN0max',\
      \ '16'), ('Sps', '1'), ('Rs', '1')], [('0', 'complex', 16)], [('0', 'complex',\
      \ 16)], '\\nEs un canal AWGN (Additive White Gaussian Noise, en banda base),\
      \ con entrada vectorial. Recibe la envolvente compleja de una senal con modulacion\
      \ digital. Entrega la misma senal recibida pero con ruido blanco gausiano aditivo\
      \ con diferentes valores de potencia que corresponden a N diferentes valores\
      \ de Es/No entre EsNOmin y EsN0max (valores dados en dB). Este bloque se diferencia\
      \ de otros bloques tradicionales de canal AWGN en lo siguiente: Tiene internamente\
      \ una funcion que mide la potencia promedio de la senal entrante Ps, de modo\
      \ que puede calcular Es=Ps/Rs; de esa manera puede N valores de potencia Pn\
      \ para el ruido Pn para lograr los N valores de la relacion Es/No. Con esto\
      \ ha completado el primer ensayo para que otro sea el bloque que calcule la\
      \ Curva de SER. Pero alli no para, sino que sigue realizando tantos ensayos\
      \ como lo permita el tiempo de simulacion, para que el bloque que calcula la\
      \ Curva de BER la pueda ir perfeccionando cada vez mas.\\n\\nDatos de configuracion\
      \ del bloque:\\nN: Es la longitud del vector y coincide con el numero de puntos\
      \ discretos que va a tener la curva de BER. Tambien corresponde al numero de\
      \ valores que tomar\xE1 la relacion Es/No\\nEsN0min: El minimo valor a tener\
      \ en cuenta para Es/No\\nEsN0max: El maximo valor a tener en cuenta para Es/No\\\
      nRs: es la rata de simbolos.\\nSps: El numero de muestras por simbolo. Usualmente\
      \ es 1, pero pueden darse excepciones. \\nEs: es la energia de un simbolo\\\
      n\\nAlgunas variables internas son:\\nNo: es la Densidad espectral del potencia\
      \ del ruido blanco.\\nSNR: es la relacion senal a ruido\\n', [])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [611, 291]
    rotation: 270
    state: true
- name: import
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 4]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [818, 72]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 563]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1010, 378]
    rotation: 0
    state: true
- name: vs0_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: TX0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 254]
    rotation: 270
    state: enabled
- name: vs1_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: RX0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [101, 368]
    rotation: 90
    state: enabled

connections:
- [analog_random_source_x_1, '0', digital_chunks_to_symbols_xx_1, '0']
- [analog_random_source_x_1, '0', vs0_1, '0']
- [blocks_stream_to_vector_0, '0', epy_block_0, '0']
- [blocks_vector_to_stream_0, '0', digital_constellation_decoder_cb_0_0_0, '0']
- [blocks_vector_to_stream_0, '0', qtgui_const_sink_x_0, '0']
- [digital_chunks_to_symbols_xx_1, '0', blocks_stream_to_vector_0, '0']
- [digital_chunks_to_symbols_xx_1, '0', qtgui_sink_x_0, '0']
- [digital_constellation_decoder_cb_0_0_0, '0', blocks_null_sink_0, '0']
- [digital_constellation_decoder_cb_0_0_0, '0', vs1_0_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_0, '0']

metadata:
  file_format: 1
